data(Cars93,package="MASS")
data(Cars93,package="MASS")
newdata = data.frame(Type = "Large",Price = 20)
set.seed(7363)
sample1 <- Cars93[sample(nrow(Cars93), replace=TRUE),]
sample2 <- Cars93[sample(nrow(Cars93), replace=TRUE),]
sample3 <- Cars93[sample(nrow(Cars93), replace=TRUE),]
tree1Q4 <- tree(DriveTrain ~ Price + Type, data=sample1)
tree2Q4 <- tree(DriveTrain ~ Price + Type, data=sample2)
tree3Q4 <- tree(DriveTrain ~ Price + Type, data=sample3)
install.packages("tree")
load(tree)
load("tree")
library("tree", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
tree1Q4 <- tree(DriveTrain ~ Price + Type, data=sample1)
tree2Q4 <- tree(DriveTrain ~ Price + Type, data=sample2)
tree3Q4 <- tree(DriveTrain ~ Price + Type, data=sample3)
p1 <- predict(tree1Q4, data=newdata, type="class")
p2 <- predict(tree2Q4, data=newdata, type="class")
p3 <- predict(tree3Q4, data=newdata, type="class")
combined <- (p1/3 + p2/3 + p3/3)
combined <- (p1/3 + p2/3 + p3/3)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(randomForest)
library(e1071)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
install.packages("randomForest")
library(randomForest)
library(e1071)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
setseed(33833)
rfQ5  <- randomForest(y ~ ., data=vowel.train)
svmQ5 <- svm(y ~ ., data=vowel.train)
?colorRamp()
grep(^s(.*?)r, "she likes rum raisin after running hard")
grep("^s(.*?)r", "she likes rum raisin after running hard")
ans <- grep("^s(.*?)r", "she likes rum raisin after running hard")
ans
regexpr("^s(.*?)r", "she likes rum raisin after running hard")
load(url("http://bit.ly/dasi_gss_data"))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(SAheart)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
trainsO = segmentationOriginal[segmentationOriginal$Case = "Test"]
trainsO = segmentationOriginal(segmentationOriginal$Case = "Test")
trainsO <- segmentationOriginal[segmentationOriginal$Case = "Test"]
trainsO <- segmentationOriginal[Case = "Train"]
trainsO <- subset(segmentationOriginal, Case = "Train")
testsO <- subset(segmentationOriginal, Case = "Test")
set.seed(125)
data(mtcars)
summary(mtcars)
names(mtcars)
featurePlot(x=mtcars[,c("cyl", "disp", "hp", "drat", "wt", "qsec", "vs", "am", "gear", "carb")], y = mtcars$mpg, plot = "pairs")
pairs(~mpg+disp+drat+wt,data=mtcars,
main="Simple Scatterplot Matrix")
shiny::runApp('~/Documents/Coursera/Data_Sci_PW/thirdmonth/App-1')
shiny::runApp('~/Documents/Coursera/Data_Sci_PW/thirdmonth/App-1')
shiny::runApp('~/Documents/Coursera/Data_Sci_PW/thirdmonth/App-1')
runApp("censusVis", display.mode = "showcase")
setwd("~/Documents/Coursera/Data_Sci_PW/thirdmonth")
runApp("censusVis", display.mode = "showcase")
shiny::runApp('censusVis')
shiny::runApp('censusVis')
shiny::runApp('censusVis')
shiny::runApp('censusVis')
shiny::runApp('censusVis')
plot(mtcars$mpg ~ mtcars$cyl)
names(mtcars)
plot(mtcars$mpg ~ mtcars$disp)
plot(mtcars$mpg ~ mtcars$hp)
plot(mtcars$mpg ~ mtcars$drat)
plot(mtcars$mpg ~ mtcars$wt)
plot(mtcars$mpg ~ mtcars$qsec)
plot(mtcars$mpg ~ mtcars$vs)
plot(mtcars$mpg ~ mtcars$am)
plot(mtcars$mpg ~ mtcars$gear)
plot(mtcars$mpg ~ mtcars$carb)
cars_model <- lm(mtcars$mpg ~ mtcars$am)
summary(cars_model)
summary(mtcars$am)
table(mtcars$am)
setwd("~/Documents/Coursera/Data_Sci_PW/thirdmonth")
par(mfrow(2,5))
plot(mtcars$mpg ~ mtcars$cyl)
plot(mtcars$mpg ~ mtcars$disp)
plot(mtcars$mpg ~ mtcars$hp)plot(mtcars$mpg ~ mtcars$drat)
plot(mtcars$mpg ~ mtcars$wt)
plot(mtcars$mpg ~ mtcars$qsec)
plot(mtcars$mpg ~ mtcars$vs)
plot(mtcars$mpg ~ mtcars$am)
plot(mtcars$mpg ~ mtcars$gear)
plot(mtcars$mpg ~ mtcars$carb)
par(mfrow(2,5))
plot(mtcars$mpg ~ mtcars$cyl)
plot(mtcars$mpg ~ mtcars$disp)
plot(mtcars$mpg ~ mtcars$hp)
plot(mtcars$mpg ~ mtcars$drat)
plot(mtcars$mpg ~ mtcars$wt)
plot(mtcars$mpg ~ mtcars$qsec)
plot(mtcars$mpg ~ mtcars$vs)
plot(mtcars$mpg ~ mtcars$am)
plot(mtcars$mpg ~ mtcars$gear)
plot(mtcars$mpg ~ mtcars$carb)
par(mfrow = c(2,5))
plot(mtcars$mpg ~ mtcars$cyl)
plot(mtcars$mpg ~ mtcars$disp)
plot(mtcars$mpg ~ mtcars$hp)
plot(mtcars$mpg ~ mtcars$drat)
plot(mtcars$mpg ~ mtcars$wt)
plot(mtcars$mpg ~ mtcars$qsec)
plot(mtcars$mpg ~ mtcars$vs)
plot(mtcars$mpg ~ mtcars$am)
plot(mtcars$mpg ~ mtcars$gear)
plot(mtcars$mpg ~ mtcars$carb)
anova(cars_model)
cars_model2 <- lm(mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am + gear + carb, data = mtcars)
anova(cars_model2)
data(mtcars)
model <- lm(mpg ~ as.factor(cyl) + wt, data = mtcars)
summary(model)
model1 <- lm(mpg ~ as.factor(cyl), data = mtcars)
summary(model1)
cars_model4 <- lm(mtcars$mpg ~ as.factor(mtcars$am))
summary(model4)
model2 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(model2)
data(morley)
summary(morley)
names(morley)
view(morley)
View(morley)
hist(morley$Speed)
plot(Run ~ Speed, data = morley)
michelson <- transform(morley,
Expt = factor(Expt), Run = factor(Run))
xtabs(~ Expt + Run, data = michelson)  # 5 x 20 balanced (two-way)
plot(Speed ~ Expt, data = michelson,
main = "Speed of Light Data", xlab = "Experiment No.")
fm <- aov(Speed ~ Run + Expt, data = michelson)
summary(fm)
fm0 <- update(fm, . ~ . - Run)
anova(fm0, fm)
coplot(circumference ~ age | Tree, data = Orange, show.given = FALSE)
fm1 <- nls(circumference ~ SSlogis(age, Asym, xmid, scal),
data = Orange, subset = Tree == 3)
plot(circumference ~ age, data = Orange, subset = Tree == 3,
xlab = "Tree age (days since 1968/12/31)",
ylab = "Tree circumference (mm)", las = 1,
main = "Orange tree data and fitted model (Tree 3 only)")
age <- seq(0, 1600, length.out = 101)
lines(age, predict(fm1, list(age = age)))
plot(rate ~ conc, data = Puromycin, las = 1,
xlab = "Substrate concentration (ppm)",
ylab = "Reaction velocity (counts/min/min)",
pch = as.integer(Puromycin$state),
col = as.integer(Puromycin$state),
main = "Puromycin data and fitted Michaelis-Menten curves")
## simplest form of fitting the Michaelis-Menten model to these data
fm1 <- nls(rate ~ Vm * conc/(K + conc), data = Puromycin,
subset = state == "treated",
start = c(Vm = 200, K = 0.05))
fm2 <- nls(rate ~ Vm * conc/(K + conc), data = Puromycin,
subset = state == "untreated",
start = c(Vm = 160, K = 0.05))
summary(fm1)
summary(fm2)
## add fitted lines to the plot
conc <- seq(0, 1.2, length.out = 101)
lines(conc, predict(fm1, list(conc = conc)), lty = 1, col = 1)
lines(conc, predict(fm2, list(conc = conc)), lty = 2, col = 2)
legend(0.8, 120, levels(Puromycin$state),
col = 1:2, lty = 1:2, pch = 1:2)
## using partial linearity
fm3 <- nls(rate ~ conc/(K + conc), data = Puromycin,
subset = state == "treated", start = c(K = 0.05),
algorithm = "plinear")
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
data()
data(FuelEconomy)
View(cars2012)
model2012 <- lm(FE ~ as.factor(CarlineClassDesc), data = cars2012)
summary(model2012)
data(iris)
summary(iris)
dim(iris)
dim(2012)
dim(cars2012)
View(iris)
View(iris)
shiny::runApp('cars2012')
str(cars2012)
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
as.numeric(cars2012$Transmission)
shiny::runApp('cars2012')
shiny::runApp('cars2012')
str(cars2012)
View(cars2012)
cars2012$Transmission <- as.numeric(cars2012$Transmission)
str(cars2012)
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
shiny::runApp('cars2012')
library("shinyapps", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
shinyapps::setAccountInfo(name='aedevaux', token='0B3C44E34ACB9B29CEDE5D816A244C0D', secret='YrMmaH8tG1wZvM1eCP0mM3VfyGaRZl2HPT0z+6bV')
deployApp()
setwd("~/Documents/Coursera/Data_Sci_PW/thirdmonth/Developing_Data_Products/FuelEconomy")
shiny::runApp()
shiny::runApp()
shiny::runApp()
data(FuelEconmy)
library(AppliedPredictiveModeling)
data(FuelEconmy)
shiny::runApp()
data(FuelEconomy)
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
library("slidify", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("slidifyLibraries", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
author()
setwd("~/Documents/Coursera/Data_Sci_PW/thirdmonth/Developing_Data_Products/FuelEconomy")
author("~/Documents/Coursera/Data_Sci_PW/thirdmonth/Developing_Data_Products/FuelEconomy")
author("slidifydemo")
---
shiny::runApp('~/Documents/Coursera/Data_Sci_PW/thirdmonth/Developing_Data_Products/FuelEconomy')
setwd("~/Documents/Coursera/Data_Sci_PW/thirdmonth/Developing_Data_Products/FuelEconomy/slidifydemo")
install.packages("tiff")
library("tiff", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
shiny::runApp('~/Documents/Coursera/Data_Sci_PW/thirdmonth/Developing_Data_Products/FuelEconomy')
shiny::runApp('~/Documents/Coursera/Data_Sci_PW/thirdmonth/Developing_Data_Products/FuelEconomy')
View(cars2010)
clusters <- kmeans(selectedData(), 3)
```{r}
plot(kmeans((cars2010$EngDispl, cars2010$NumCyl), 3))
Project for Coursera Developing Data Products
publish()
publish(host = "github")
publish(host = "https://github.com/aedevaux/Developing_Data_Products/tree/master/FuelEconomy")
publish_github("https://github.com/aedevaux/Developing_Data_Products/tree/master/FuelEconomy")
publish_github("https://github.com/aedevaux/Developing_Data_Products/tree/master/FuelEconomy",  username = getOption("aedevaux"))
setwd("~/Documents/Coursera/Data_Sci_PW/thirdmonth/Developing_Data_Products/FuelEconomy/slidifydemo")
publish_github("https://github.com/aedevaux/Developing_Data_Products/tree/master/FuelEconomy",  username = getOption("aedevaux"))
publish_github("https://github.com/aedevaux/Developing_Data_Products/tree/master/FuelEconomy",  username = "aedevaux")
publish_github("http://github.com/aedevaux/Developing_Data_Products/tree/master/FuelEconomy",  username = "aedevaux")
publish_github("http://github.com/aedevaux",  username = "aedevaux")
publish_github( username = "aedevaux")
publish_github("Developing_Data_Products", username = "aedevaux")
setwd("~/Documents/Coursera/Data_Sci_PW/thirdmonth/Developing_Data_Products/FuelEconomy")
publish_github("Developing_Data_Products", username = "aedevaux")
Slidify
setwd("~/Documents/Coursera/Data_Sci_PW/thirdmonth/Developing_Data_Products/FuelEconomy/slidifydemo")
publish_github("Developing_Data_Products", username = "aedevaux")
publish_github("Developing_Data_Products", username = "aedevaux")
publish_github("Developing_Slidify", username = "aedevaux")
publish_github("Developing_Slidify", username = "aedevaux")
publish_github("Developing_Slidify", username = "aedevaux")
publish_github("Developing_Slidify", username = "aedevaux")
setwd("~/Documents/Coursera/Data_Sci_PW/thirdmonth/pmachlearn")
PMLtraining<-read.csv("pml-training.csv")
PMLtesting<-read.csv("pml-testing.csv")
names(PMLtraining)
set.seed(4321)
trainInx <- createDataPartition(raw_training$classe, list=FALSE, p=.7)
training = PMLtraining[trainingIn,]
testing = PMLtraining[-trainingIn,]
trainIn <- createDataPartition(raw_training$classe, list=FALSE, p=.7)
training = PMLtraining[trainingIn,]
testing = PMLtraining[-trainingIn,]
set.seed(4321)
trainIn <- createDataPartition(raw_training$classe, list=FALSE, p=.7)
training = PMLtraining[trainIn,]
testing = PMLtraining[-trainIn,]
set.seed(4321)
trainIn <- createDataPartition(PMLtraining$classe, list=FALSE, p=.7)
training = PMLtraining[trainIn,]
testing = PMLtraining[-trainIn,]
View(testing)
View(testing)
summary(testing$classe)
model <- randomForest(classe ~ ., training)
library(caret)
library(lattice)
library(ggplot2)
library(stats)
library(randomForest)
model <- randomForest(classe ~ ., training)
preProc <- preProcess(training[,num_idx], method=c('knnImpute'))
num_idx = which(lapply(training,class) %in% c('numeric')  )
preProc <- preProcess(training[,num_idx], method=c('knnImpute'))
training <- cbind(training$classe, predict(preProc, training[,num_idx]))
testing <- cbind(testing$classe, predict(preProc, training[,num_idx]))
testing <- cbind(testing$classe, predict(preProc, testing[,num_idx]))
model  <- randomForest(classe ~ ., ptraining)
model  <- randomForest(classe ~ ., training)
View(training)
names classe
names(training)
model  <- randomForest(training$classe ~ ., training)
names(testing)[1] <- "classe"
names(training)[1] <- "classe"
model  <- randomForest(training$classe ~ ., training)
RFmodel  <- randomForest(training$classe ~ ., training)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
answers <- predict(RFmodel, PMLtesting)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
answers
numID = which(lapply(training,class) %in% c('numeric'))
predtest <- predict(preModel, PMLtesting[,numID])
predtest <- predict(preProc, PMLtesting[,numID])
answers <- predict(RFmodel, predtest)
preProc <- preProcess(training[,numID], method=c('knnImpute'))
predtest <- predict(preProc, PMLtesting[,numID])
View(PMLtesting)
names(PMLtesting)
numID = which(lapply(training,class) %in% c('numeric'))
predtest <- predict(preProc, PMLtesting[,numID])
preProc <- preProcess(training[,numID], method=c('knnImpute'))
answers <- predict(RFmodel, prtesting[,numID])
answers <- predict(RFmodel, PMLtesting[,numID])
numID
predtest <- PMLtesting[,numID])
set.seed(4321)
trainIn <- createDataPartition(PMLtraining$classe, list=FALSE, p=.7)
training = PMLtraining[trainIn,]
testing = PMLtraining[-trainIn,]
numID = which(lapply(training,class) %in% c('numeric'))
preProc <- preProcess(training[,numID], method=c('knnImpute'))
training <- cbind(training$classe, predict(preProc, training[,numID]))
testing <- cbind(testing$classe, predict(preProc, testing[,numID]))
names(testing)[1] <- "classe"
names(training)[1] <- "classe"
predtest <- predict(preProc, PMLtesting[,numID])
answers <- predict(RFmodel, predtest)
answers
trainPred <- predict(modelRF, training)
trainPred <- predict(RFmodel, training)
confusionMatrix(trainPred, training)
print(confusionMatrix(trainPred, training))
print(confusionMatrix(trainPred, training$classe))
confusionMatrix(trainPred, training$classe
)
testPred <- predict(RFmodel, testing)
confusionMatrix(testPred, testing$classe)
setwd("~/Documents/Coursera/Data_Sci_PW/thirdmonth/pmachlearn/Practical_Machine_Learning")
